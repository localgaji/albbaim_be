plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'io.freefair.lombok' version '8.3'
	id 'jacoco'
}

group = 'localgaji'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jar {
	enabled = false
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
	implementation "com.fasterxml.jackson.core:jackson-core:2.15.0"
	implementation "io.jsonwebtoken:jjwt-api:0.11.5"
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.5"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.11.5"
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

subprojects {
	apply plugin: 'io.freefair.lombok'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	reports {
		html.destination file("$buildDir/jacoco/report.html")
	}
	finalizedBy 'jacocoTestCoverageVerification'

	getClassDirectories().setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						'**/*DTO*',
						'**/__core__'
				])
			})
	)
}
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 500
			}
		}
	}
}